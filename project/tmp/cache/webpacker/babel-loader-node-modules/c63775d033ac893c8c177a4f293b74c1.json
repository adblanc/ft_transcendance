{"ast":null,"code":"import getLength from './_getLength.js';\nimport isArrayLike from './_isArrayLike.js';\nimport isArray from './isArray.js';\nimport isArguments from './isArguments.js'; // Internal implementation of a recursive `flatten` function.\n\nexport default function flatten(input, depth, strict, output) {\n  output = output || [];\n\n  if (!depth && depth !== 0) {\n    depth = Infinity;\n  } else if (depth <= 0) {\n    return output.concat(input);\n  }\n\n  var idx = output.length;\n\n  for (var i = 0, length = getLength(input); i < length; i++) {\n    var value = input[i];\n\n    if (isArrayLike(value) && (isArray(value) || isArguments(value))) {\n      // Flatten current level of array or arguments object.\n      if (depth > 1) {\n        flatten(value, depth - 1, strict, output);\n        idx = output.length;\n      } else {\n        var j = 0,\n            len = value.length;\n\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      }\n    } else if (!strict) {\n      output[idx++] = value;\n    }\n  }\n\n  return output;\n}","map":null,"metadata":{},"sourceType":"module"}