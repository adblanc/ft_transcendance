{"ast":null,"code":"import { nonEnumerableProps, ObjProto } from './_setup.js';\nimport isFunction from './isFunction.js';\nimport has from './_has.js'; // Internal helper to create a simple lookup structure.\n// `collectNonEnumProps` used to depend on `_.contains`, but this led to\n// circular imports. `emulatedSet` is a one-off solution that only works for\n// arrays of strings.\n\nfunction emulatedSet(keys) {\n  var hash = {};\n\n  for (var l = keys.length, i = 0; i < l; ++i) {\n    hash[keys[i]] = true;\n  }\n\n  return {\n    contains: function contains(key) {\n      return hash[key];\n    },\n    push: function push(key) {\n      hash[key] = true;\n      return keys.push(key);\n    }\n  };\n} // Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't\n// be iterated by `for key in ...` and thus missed. Extends `keys` in place if\n// needed.\n\n\nexport default function collectNonEnumProps(obj, keys) {\n  keys = emulatedSet(keys);\n  var nonEnumIdx = nonEnumerableProps.length;\n  var constructor = obj.constructor;\n  var proto = isFunction(constructor) && constructor.prototype || ObjProto; // Constructor is a special case.\n\n  var prop = 'constructor';\n  if (has(obj, prop) && !keys.contains(prop)) keys.push(prop);\n\n  while (nonEnumIdx--) {\n    prop = nonEnumerableProps[nonEnumIdx];\n\n    if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {\n      keys.push(prop);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}