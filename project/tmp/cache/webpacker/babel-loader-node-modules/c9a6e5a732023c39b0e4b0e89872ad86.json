{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport _ from './underscore.js';\nimport { toString, SymbolProto } from './_setup.js';\nimport getByteLength from './_getByteLength.js';\nimport isTypedArray from './isTypedArray.js';\nimport isFunction from './isFunction.js';\nimport keys from './keys.js';\nimport has from './_has.js'; // Internal recursive comparison function for `_.isEqual`.\n\nfunction eq(a, b, aStack, bStack) {\n  // Identical objects are equal. `0 === -0`, but they aren't identical.\n  // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).\n  if (a === b) return a !== 0 || 1 / a === 1 / b; // `null` or `undefined` only equal to itself (strict comparison).\n\n  if (a == null || b == null) return false; // `NaN`s are equivalent, but non-reflexive.\n\n  if (a !== a) return b !== b; // Exhaust primitive checks\n\n  var type = _typeof(a);\n\n  if (type !== 'function' && type !== 'object' && _typeof(b) != 'object') return false;\n  return deepEq(a, b, aStack, bStack);\n} // Internal recursive comparison function for `_.isEqual`.\n\n\nfunction deepEq(a, b, aStack, bStack) {\n  // Unwrap any wrapped objects.\n  if (a instanceof _) a = a._wrapped;\n  if (b instanceof _) b = b._wrapped; // Compare `[[Class]]` names.\n\n  var className = toString.call(a);\n  if (className !== toString.call(b)) return false;\n\n  switch (className) {\n    // These types are compared by value.\n    case '[object RegExp]': // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n\n    case '[object String]':\n      // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n      // equivalent to `new String(\"5\")`.\n      return '' + a === '' + b;\n\n    case '[object Number]':\n      // `NaN`s are equivalent, but non-reflexive.\n      // Object(NaN) is equivalent to NaN.\n      if (+a !== +a) return +b !== +b; // An `egal` comparison is performed for other numeric values.\n\n      return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n\n    case '[object Date]':\n    case '[object Boolean]':\n      // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n      // millisecond representations. Note that invalid dates with millisecond representations\n      // of `NaN` are not equivalent.\n      return +a === +b;\n\n    case '[object Symbol]':\n      return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n\n    case '[object ArrayBuffer]':\n      // Coerce to `DataView` so we can fall through to the next case.\n      return deepEq(new DataView(a), new DataView(b), aStack, bStack);\n\n    case '[object DataView]':\n      var byteLength = getByteLength(a);\n\n      if (byteLength !== getByteLength(b)) {\n        return false;\n      }\n\n      while (byteLength--) {\n        if (a.getUint8(byteLength) !== b.getUint8(byteLength)) {\n          return false;\n        }\n      }\n\n      return true;\n  }\n\n  if (isTypedArray(a)) {\n    // Coerce typed arrays to `DataView`.\n    return deepEq(new DataView(a.buffer), new DataView(b.buffer), aStack, bStack);\n  }\n\n  var areArrays = className === '[object Array]';\n\n  if (!areArrays) {\n    if (_typeof(a) != 'object' || _typeof(b) != 'object') return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n    // from different frames are.\n\n    var aCtor = a.constructor,\n        bCtor = b.constructor;\n\n    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && 'constructor' in a && 'constructor' in b) {\n      return false;\n    }\n  } // Assume equality for cyclic structures. The algorithm for detecting cyclic\n  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n  // Initializing stack of traversed objects.\n  // It's done here since we only need them for objects and arrays comparison.\n\n\n  aStack = aStack || [];\n  bStack = bStack || [];\n  var length = aStack.length;\n\n  while (length--) {\n    // Linear search. Performance is inversely proportional to the number of\n    // unique nested structures.\n    if (aStack[length] === a) return bStack[length] === b;\n  } // Add the first object to the stack of traversed objects.\n\n\n  aStack.push(a);\n  bStack.push(b); // Recursively compare objects and arrays.\n\n  if (areArrays) {\n    // Compare array lengths to determine if a deep comparison is necessary.\n    length = a.length;\n    if (length !== b.length) return false; // Deep compare the contents, ignoring non-numeric properties.\n\n    while (length--) {\n      if (!eq(a[length], b[length], aStack, bStack)) return false;\n    }\n  } else {\n    // Deep compare objects.\n    var _keys = keys(a),\n        key;\n\n    length = _keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.\n\n    if (keys(b).length !== length) return false;\n\n    while (length--) {\n      // Deep compare each member\n      key = _keys[length];\n      if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n    }\n  } // Remove the first object from the stack of traversed objects.\n\n\n  aStack.pop();\n  bStack.pop();\n  return true;\n} // Perform a deep comparison to check if two objects are equal.\n\n\nexport default function isEqual(a, b) {\n  return eq(a, b);\n}","map":null,"metadata":{},"sourceType":"module"}