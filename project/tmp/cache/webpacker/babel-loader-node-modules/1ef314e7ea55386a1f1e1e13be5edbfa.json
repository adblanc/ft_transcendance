{"ast":null,"code":"// Some functions take a variable number of arguments, or a few expected\n// arguments at the beginning and then a variable number of values to operate\n// on. This helper accumulates all remaining arguments past the function’s\n// argument length (or an explicit `startIndex`), into an array that becomes\n// the last argument. Similar to ES6’s \"rest parameter\".\nexport default function restArguments(func, startIndex) {\n  startIndex = startIndex == null ? func.length - 1 : +startIndex;\n  return function () {\n    var length = Math.max(arguments.length - startIndex, 0),\n        rest = Array(length),\n        index = 0;\n\n    for (; index < length; index++) {\n      rest[index] = arguments[index + startIndex];\n    }\n\n    switch (startIndex) {\n      case 0:\n        return func.call(this, rest);\n\n      case 1:\n        return func.call(this, arguments[0], rest);\n\n      case 2:\n        return func.call(this, arguments[0], arguments[1], rest);\n    }\n\n    var args = Array(startIndex + 1);\n\n    for (index = 0; index < startIndex; index++) {\n      args[index] = arguments[index];\n    }\n\n    args[startIndex] = rest;\n    return func.apply(this, args);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}