{"ast":null,"code":"import restArguments from './restArguments.js';\nimport delay from './delay.js'; // When a sequence of calls of the returned function ends, the argument\n// function is triggered. The end of a sequence is defined by the `wait`\n// parameter. If `immediate` is passed, the argument function will be\n// triggered at the beginning of the sequence instead of at the end.\n\nexport default function debounce(func, wait, immediate) {\n  var timeout, result;\n\n  var later = function later(context, args) {\n    timeout = null;\n    if (args) result = func.apply(context, args);\n  };\n\n  var debounced = restArguments(function (args) {\n    if (timeout) clearTimeout(timeout);\n\n    if (immediate) {\n      var callNow = !timeout;\n      timeout = setTimeout(later, wait);\n      if (callNow) result = func.apply(this, args);\n    } else {\n      timeout = delay(later, wait, this, args);\n    }\n\n    return result;\n  });\n\n  debounced.cancel = function () {\n    clearTimeout(timeout);\n    timeout = null;\n  };\n\n  return debounced;\n}","map":null,"metadata":{},"sourceType":"module"}